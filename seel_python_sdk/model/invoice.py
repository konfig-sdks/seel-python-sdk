# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401


class Invoice(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            invoice_id = schemas.StrSchema
            merchant_id = schemas.StrSchema
            billing_cycle = schemas.IntSchema
            billing_date = schemas.StrSchema
            billing_start_date = schemas.StrSchema
            billing_end_date = schemas.StrSchema
            currency = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "unpaid": "UNPAID",
                        "paid": "PAID",
                    }
                
                @schemas.classproperty
                def UNPAID(cls):
                    return cls("unpaid")
                
                @schemas.classproperty
                def PAID(cls):
                    return cls("paid")
            invoice_amount = schemas.Float64Schema
            invoice_link = schemas.StrSchema
        
            @staticmethod
            def invoice_items() -> typing.Type['InvoiceInvoiceItems']:
                return InvoiceInvoiceItems
            __annotations__ = {
                "invoice_id": invoice_id,
                "merchant_id": merchant_id,
                "billing_cycle": billing_cycle,
                "billing_date": billing_date,
                "billing_start_date": billing_start_date,
                "billing_end_date": billing_end_date,
                "currency": currency,
                "status": status,
                "invoice_amount": invoice_amount,
                "invoice_link": invoice_link,
                "invoice_items": invoice_items,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_id"]) -> MetaOapg.properties.invoice_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_id"]) -> MetaOapg.properties.merchant_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_cycle"]) -> MetaOapg.properties.billing_cycle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_date"]) -> MetaOapg.properties.billing_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_start_date"]) -> MetaOapg.properties.billing_start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_end_date"]) -> MetaOapg.properties.billing_end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_amount"]) -> MetaOapg.properties.invoice_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_link"]) -> MetaOapg.properties.invoice_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoice_items"]) -> 'InvoiceInvoiceItems': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["invoice_id", "merchant_id", "billing_cycle", "billing_date", "billing_start_date", "billing_end_date", "currency", "status", "invoice_amount", "invoice_link", "invoice_items", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_id"]) -> typing.Union[MetaOapg.properties.invoice_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_id"]) -> typing.Union[MetaOapg.properties.merchant_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_cycle"]) -> typing.Union[MetaOapg.properties.billing_cycle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_date"]) -> typing.Union[MetaOapg.properties.billing_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_start_date"]) -> typing.Union[MetaOapg.properties.billing_start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_end_date"]) -> typing.Union[MetaOapg.properties.billing_end_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_amount"]) -> typing.Union[MetaOapg.properties.invoice_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_link"]) -> typing.Union[MetaOapg.properties.invoice_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoice_items"]) -> typing.Union['InvoiceInvoiceItems', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["invoice_id", "merchant_id", "billing_cycle", "billing_date", "billing_start_date", "billing_end_date", "currency", "status", "invoice_amount", "invoice_link", "invoice_items", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        invoice_id: typing.Union[MetaOapg.properties.invoice_id, str, schemas.Unset] = schemas.unset,
        merchant_id: typing.Union[MetaOapg.properties.merchant_id, str, schemas.Unset] = schemas.unset,
        billing_cycle: typing.Union[MetaOapg.properties.billing_cycle, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        billing_date: typing.Union[MetaOapg.properties.billing_date, str, schemas.Unset] = schemas.unset,
        billing_start_date: typing.Union[MetaOapg.properties.billing_start_date, str, schemas.Unset] = schemas.unset,
        billing_end_date: typing.Union[MetaOapg.properties.billing_end_date, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        invoice_amount: typing.Union[MetaOapg.properties.invoice_amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        invoice_link: typing.Union[MetaOapg.properties.invoice_link, str, schemas.Unset] = schemas.unset,
        invoice_items: typing.Union['InvoiceInvoiceItems', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Invoice':
        return super().__new__(
            cls,
            *args,
            invoice_id=invoice_id,
            merchant_id=merchant_id,
            billing_cycle=billing_cycle,
            billing_date=billing_date,
            billing_start_date=billing_start_date,
            billing_end_date=billing_end_date,
            currency=currency,
            status=status,
            invoice_amount=invoice_amount,
            invoice_link=invoice_link,
            invoice_items=invoice_items,
            _configuration=_configuration,
            **kwargs,
        )

from seel_python_sdk.model.invoice_invoice_items import InvoiceInvoiceItems
