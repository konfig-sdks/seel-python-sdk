# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401


class OrderUpdateOrderDetailsRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "updated_ts",
        }
        
        class properties:
            updated_ts = schemas.StrSchema
            
            
            class line_items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Item']:
                        return Item
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Item'], typing.List['Item']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'line_items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Item':
                    return super().__getitem__(i)
        
            @staticmethod
            def shipping_address() -> typing.Type['Address']:
                return Address
        
            @staticmethod
            def customer() -> typing.Type['Customer']:
                return Customer
            extra_info = schemas.DictSchema
            __annotations__ = {
                "updated_ts": updated_ts,
                "line_items": line_items,
                "shipping_address": shipping_address,
                "customer": customer,
                "extra_info": extra_info,
            }
    
    updated_ts: MetaOapg.properties.updated_ts
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_ts"]) -> MetaOapg.properties.updated_ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["line_items"]) -> MetaOapg.properties.line_items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_address"]) -> 'Address': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer"]) -> 'Customer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_info"]) -> MetaOapg.properties.extra_info: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["updated_ts", "line_items", "shipping_address", "customer", "extra_info", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_ts"]) -> MetaOapg.properties.updated_ts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["line_items"]) -> typing.Union[MetaOapg.properties.line_items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_address"]) -> typing.Union['Address', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer"]) -> typing.Union['Customer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_info"]) -> typing.Union[MetaOapg.properties.extra_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["updated_ts", "line_items", "shipping_address", "customer", "extra_info", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        updated_ts: typing.Union[MetaOapg.properties.updated_ts, str, ],
        line_items: typing.Union[MetaOapg.properties.line_items, list, tuple, schemas.Unset] = schemas.unset,
        shipping_address: typing.Union['Address', schemas.Unset] = schemas.unset,
        customer: typing.Union['Customer', schemas.Unset] = schemas.unset,
        extra_info: typing.Union[MetaOapg.properties.extra_info, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OrderUpdateOrderDetailsRequest':
        return super().__new__(
            cls,
            *args,
            updated_ts=updated_ts,
            line_items=line_items,
            shipping_address=shipping_address,
            customer=customer,
            extra_info=extra_info,
            _configuration=_configuration,
            **kwargs,
        )

from seel_python_sdk.model.address import Address
from seel_python_sdk.model.customer import Customer
from seel_python_sdk.model.item import Item
