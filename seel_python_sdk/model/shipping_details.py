# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401


class ShippingDetails(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            weight_g = schemas.Float64Schema
            length_cm = schemas.Float64Schema
            height_cm = schemas.Float64Schema
            width_cm = schemas.Float64Schema
            shipping_cost = schemas.Float64Schema
            __annotations__ = {
                "weight_g": weight_g,
                "length_cm": length_cm,
                "height_cm": height_cm,
                "width_cm": width_cm,
                "shipping_cost": shipping_cost,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weight_g"]) -> MetaOapg.properties.weight_g: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["length_cm"]) -> MetaOapg.properties.length_cm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height_cm"]) -> MetaOapg.properties.height_cm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width_cm"]) -> MetaOapg.properties.width_cm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_cost"]) -> MetaOapg.properties.shipping_cost: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["weight_g", "length_cm", "height_cm", "width_cm", "shipping_cost", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weight_g"]) -> typing.Union[MetaOapg.properties.weight_g, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["length_cm"]) -> typing.Union[MetaOapg.properties.length_cm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height_cm"]) -> typing.Union[MetaOapg.properties.height_cm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width_cm"]) -> typing.Union[MetaOapg.properties.width_cm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_cost"]) -> typing.Union[MetaOapg.properties.shipping_cost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["weight_g", "length_cm", "height_cm", "width_cm", "shipping_cost", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        weight_g: typing.Union[MetaOapg.properties.weight_g, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        length_cm: typing.Union[MetaOapg.properties.length_cm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        height_cm: typing.Union[MetaOapg.properties.height_cm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        width_cm: typing.Union[MetaOapg.properties.width_cm, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        shipping_cost: typing.Union[MetaOapg.properties.shipping_cost, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ShippingDetails':
        return super().__new__(
            cls,
            *args,
            weight_g=weight_g,
            length_cm=length_cm,
            height_cm=height_cm,
            width_cm=width_cm,
            shipping_cost=shipping_cost,
            _configuration=_configuration,
            **kwargs,
        )
