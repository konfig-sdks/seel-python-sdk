# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401


class Event(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            event_id = schemas.StrSchema
            session_id = schemas.StrSchema
            event_ts = schemas.StrSchema
            customer_id = schemas.StrSchema
            device_id = schemas.StrSchema
            browser_ip = schemas.StrSchema
            event_source = schemas.StrSchema
            
            
            class event_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "product_page_enter": "PRODUCT_PAGE_ENTER",
                        "product_page_exit": "PRODUCT_PAGE_EXIT",
                        "product_share": "PRODUCT_SHARE",
                        "favorite_add": "FAVORITE_ADD",
                        "favorite_remove": "FAVORITE_REMOVE",
                        "cart_add": "CART_ADD",
                        "cart_remove": "CART_REMOVE",
                        "ra_checked": "RA_CHECKED",
                        "ra_unchecked": "RA_UNCHECKED",
                        "checkout_begin": "CHECKOUT_BEGIN",
                        "checkout_complete": "CHECKOUT_COMPLETE",
                    }
                
                @schemas.classproperty
                def PRODUCT_PAGE_ENTER(cls):
                    return cls("product_page_enter")
                
                @schemas.classproperty
                def PRODUCT_PAGE_EXIT(cls):
                    return cls("product_page_exit")
                
                @schemas.classproperty
                def PRODUCT_SHARE(cls):
                    return cls("product_share")
                
                @schemas.classproperty
                def FAVORITE_ADD(cls):
                    return cls("favorite_add")
                
                @schemas.classproperty
                def FAVORITE_REMOVE(cls):
                    return cls("favorite_remove")
                
                @schemas.classproperty
                def CART_ADD(cls):
                    return cls("cart_add")
                
                @schemas.classproperty
                def CART_REMOVE(cls):
                    return cls("cart_remove")
                
                @schemas.classproperty
                def RA_CHECKED(cls):
                    return cls("ra_checked")
                
                @schemas.classproperty
                def RA_UNCHECKED(cls):
                    return cls("ra_unchecked")
                
                @schemas.classproperty
                def CHECKOUT_BEGIN(cls):
                    return cls("checkout_begin")
                
                @schemas.classproperty
                def CHECKOUT_COMPLETE(cls):
                    return cls("checkout_complete")
            event_info = schemas.DictSchema
            __annotations__ = {
                "event_id": event_id,
                "session_id": session_id,
                "event_ts": event_ts,
                "customer_id": customer_id,
                "device_id": device_id,
                "browser_ip": browser_ip,
                "event_source": event_source,
                "event_type": event_type,
                "event_info": event_info,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_id"]) -> MetaOapg.properties.event_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["session_id"]) -> MetaOapg.properties.session_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_ts"]) -> MetaOapg.properties.event_ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer_id"]) -> MetaOapg.properties.customer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browser_ip"]) -> MetaOapg.properties.browser_ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_source"]) -> MetaOapg.properties.event_source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_type"]) -> MetaOapg.properties.event_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_info"]) -> MetaOapg.properties.event_info: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["event_id", "session_id", "event_ts", "customer_id", "device_id", "browser_ip", "event_source", "event_type", "event_info", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_id"]) -> typing.Union[MetaOapg.properties.event_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["session_id"]) -> typing.Union[MetaOapg.properties.session_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_ts"]) -> typing.Union[MetaOapg.properties.event_ts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer_id"]) -> typing.Union[MetaOapg.properties.customer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> typing.Union[MetaOapg.properties.device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browser_ip"]) -> typing.Union[MetaOapg.properties.browser_ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_source"]) -> typing.Union[MetaOapg.properties.event_source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_type"]) -> typing.Union[MetaOapg.properties.event_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_info"]) -> typing.Union[MetaOapg.properties.event_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["event_id", "session_id", "event_ts", "customer_id", "device_id", "browser_ip", "event_source", "event_type", "event_info", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        event_id: typing.Union[MetaOapg.properties.event_id, str, schemas.Unset] = schemas.unset,
        session_id: typing.Union[MetaOapg.properties.session_id, str, schemas.Unset] = schemas.unset,
        event_ts: typing.Union[MetaOapg.properties.event_ts, str, schemas.Unset] = schemas.unset,
        customer_id: typing.Union[MetaOapg.properties.customer_id, str, schemas.Unset] = schemas.unset,
        device_id: typing.Union[MetaOapg.properties.device_id, str, schemas.Unset] = schemas.unset,
        browser_ip: typing.Union[MetaOapg.properties.browser_ip, str, schemas.Unset] = schemas.unset,
        event_source: typing.Union[MetaOapg.properties.event_source, str, schemas.Unset] = schemas.unset,
        event_type: typing.Union[MetaOapg.properties.event_type, str, schemas.Unset] = schemas.unset,
        event_info: typing.Union[MetaOapg.properties.event_info, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Event':
        return super().__new__(
            cls,
            *args,
            event_id=event_id,
            session_id=session_id,
            event_ts=event_ts,
            customer_id=customer_id,
            device_id=device_id,
            browser_ip=browser_ip,
            event_source=event_source,
            event_type=event_type,
            event_info=event_info,
            _configuration=_configuration,
            **kwargs,
        )
