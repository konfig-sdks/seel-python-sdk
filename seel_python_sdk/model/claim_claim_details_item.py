# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401


class ClaimClaimDetailsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def claim_items() -> typing.Type['ClaimClaimDetailsItemClaimItems']:
                return ClaimClaimDetailsItemClaimItems
            fulfillment_id = schemas.StrSchema
            __annotations__ = {
                "claim_items": claim_items,
                "fulfillment_id": fulfillment_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["claim_items"]) -> 'ClaimClaimDetailsItemClaimItems': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fulfillment_id"]) -> MetaOapg.properties.fulfillment_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["claim_items", "fulfillment_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["claim_items"]) -> typing.Union['ClaimClaimDetailsItemClaimItems', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fulfillment_id"]) -> typing.Union[MetaOapg.properties.fulfillment_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["claim_items", "fulfillment_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        claim_items: typing.Union['ClaimClaimDetailsItemClaimItems', schemas.Unset] = schemas.unset,
        fulfillment_id: typing.Union[MetaOapg.properties.fulfillment_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ClaimClaimDetailsItem':
        return super().__new__(
            cls,
            *args,
            claim_items=claim_items,
            fulfillment_id=fulfillment_id,
            _configuration=_configuration,
            **kwargs,
        )

from seel_python_sdk.model.claim_claim_details_item_claim_items import ClaimClaimDetailsItemClaimItems
