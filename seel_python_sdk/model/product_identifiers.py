# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401


class ProductIdentifiers(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            serial_number = schemas.StrSchema
            gtin = schemas.StrSchema
            upc = schemas.StrSchema
            isbn = schemas.StrSchema
            barcode = schemas.StrSchema
            __annotations__ = {
                "serial_number": serial_number,
                "gtin": gtin,
                "upc": upc,
                "isbn": isbn,
                "barcode": barcode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gtin"]) -> MetaOapg.properties.gtin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upc"]) -> MetaOapg.properties.upc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isbn"]) -> MetaOapg.properties.isbn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["barcode"]) -> MetaOapg.properties.barcode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["serial_number", "gtin", "upc", "isbn", "barcode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> typing.Union[MetaOapg.properties.serial_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gtin"]) -> typing.Union[MetaOapg.properties.gtin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upc"]) -> typing.Union[MetaOapg.properties.upc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isbn"]) -> typing.Union[MetaOapg.properties.isbn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["barcode"]) -> typing.Union[MetaOapg.properties.barcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["serial_number", "gtin", "upc", "isbn", "barcode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        serial_number: typing.Union[MetaOapg.properties.serial_number, str, schemas.Unset] = schemas.unset,
        gtin: typing.Union[MetaOapg.properties.gtin, str, schemas.Unset] = schemas.unset,
        upc: typing.Union[MetaOapg.properties.upc, str, schemas.Unset] = schemas.unset,
        isbn: typing.Union[MetaOapg.properties.isbn, str, schemas.Unset] = schemas.unset,
        barcode: typing.Union[MetaOapg.properties.barcode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProductIdentifiers':
        return super().__new__(
            cls,
            *args,
            serial_number=serial_number,
            gtin=gtin,
            upc=upc,
            isbn=isbn,
            barcode=barcode,
            _configuration=_configuration,
            **kwargs,
        )
