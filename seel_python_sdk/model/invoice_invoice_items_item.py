# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401


class InvoiceInvoiceItemsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            contract_id = schemas.StrSchema
            order_id = schemas.StrSchema
            order_number = schemas.StrSchema
            product_type = schemas.StrSchema
            created_ts = schemas.DateTimeSchema
            cancelled_ts = schemas.DateTimeSchema
            amount_collected = schemas.Float64Schema
            amount_reconciled = schemas.Float64Schema
            __annotations__ = {
                "contract_id": contract_id,
                "order_id": order_id,
                "order_number": order_number,
                "product_type": product_type,
                "created_ts": created_ts,
                "cancelled_ts": cancelled_ts,
                "amount_collected": amount_collected,
                "amount_reconciled": amount_reconciled,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_id"]) -> MetaOapg.properties.contract_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_id"]) -> MetaOapg.properties.order_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_number"]) -> MetaOapg.properties.order_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_type"]) -> MetaOapg.properties.product_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_ts"]) -> MetaOapg.properties.created_ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancelled_ts"]) -> MetaOapg.properties.cancelled_ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount_collected"]) -> MetaOapg.properties.amount_collected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount_reconciled"]) -> MetaOapg.properties.amount_reconciled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contract_id", "order_id", "order_number", "product_type", "created_ts", "cancelled_ts", "amount_collected", "amount_reconciled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_id"]) -> typing.Union[MetaOapg.properties.contract_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_id"]) -> typing.Union[MetaOapg.properties.order_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_number"]) -> typing.Union[MetaOapg.properties.order_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_type"]) -> typing.Union[MetaOapg.properties.product_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_ts"]) -> typing.Union[MetaOapg.properties.created_ts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancelled_ts"]) -> typing.Union[MetaOapg.properties.cancelled_ts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount_collected"]) -> typing.Union[MetaOapg.properties.amount_collected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount_reconciled"]) -> typing.Union[MetaOapg.properties.amount_reconciled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contract_id", "order_id", "order_number", "product_type", "created_ts", "cancelled_ts", "amount_collected", "amount_reconciled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        contract_id: typing.Union[MetaOapg.properties.contract_id, str, schemas.Unset] = schemas.unset,
        order_id: typing.Union[MetaOapg.properties.order_id, str, schemas.Unset] = schemas.unset,
        order_number: typing.Union[MetaOapg.properties.order_number, str, schemas.Unset] = schemas.unset,
        product_type: typing.Union[MetaOapg.properties.product_type, str, schemas.Unset] = schemas.unset,
        created_ts: typing.Union[MetaOapg.properties.created_ts, str, datetime, schemas.Unset] = schemas.unset,
        cancelled_ts: typing.Union[MetaOapg.properties.cancelled_ts, str, datetime, schemas.Unset] = schemas.unset,
        amount_collected: typing.Union[MetaOapg.properties.amount_collected, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        amount_reconciled: typing.Union[MetaOapg.properties.amount_reconciled, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InvoiceInvoiceItemsItem':
        return super().__new__(
            cls,
            *args,
            contract_id=contract_id,
            order_id=order_id,
            order_number=order_number,
            product_type=product_type,
            created_ts=created_ts,
            cancelled_ts=cancelled_ts,
            amount_collected=amount_collected,
            amount_reconciled=amount_reconciled,
            _configuration=_configuration,
            **kwargs,
        )
