# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401


class SeelService(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            contract_id = schemas.StrSchema
            quote_id = schemas.StrSchema
            created_ts = schemas.DateTimeSchema
            type = schemas.StrSchema
            price = schemas.Float64Schema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "active": "ACTIVE",
                        "cancelled": "CANCELLED",
                        "pending": "PENDING",
                    }
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("active")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("cancelled")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("pending")
        
            @staticmethod
            def covered_items() -> typing.Type['SeelServiceCoveredItems']:
                return SeelServiceCoveredItems
            extra_info = schemas.DictSchema
            __annotations__ = {
                "contract_id": contract_id,
                "quote_id": quote_id,
                "created_ts": created_ts,
                "type": type,
                "price": price,
                "status": status,
                "covered_items": covered_items,
                "extra_info": extra_info,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_id"]) -> MetaOapg.properties.contract_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quote_id"]) -> MetaOapg.properties.quote_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_ts"]) -> MetaOapg.properties.created_ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["covered_items"]) -> 'SeelServiceCoveredItems': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_info"]) -> MetaOapg.properties.extra_info: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contract_id", "quote_id", "created_ts", "type", "price", "status", "covered_items", "extra_info", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_id"]) -> typing.Union[MetaOapg.properties.contract_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quote_id"]) -> typing.Union[MetaOapg.properties.quote_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_ts"]) -> typing.Union[MetaOapg.properties.created_ts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["covered_items"]) -> typing.Union['SeelServiceCoveredItems', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_info"]) -> typing.Union[MetaOapg.properties.extra_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contract_id", "quote_id", "created_ts", "type", "price", "status", "covered_items", "extra_info", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        contract_id: typing.Union[MetaOapg.properties.contract_id, str, schemas.Unset] = schemas.unset,
        quote_id: typing.Union[MetaOapg.properties.quote_id, str, schemas.Unset] = schemas.unset,
        created_ts: typing.Union[MetaOapg.properties.created_ts, str, datetime, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        covered_items: typing.Union['SeelServiceCoveredItems', schemas.Unset] = schemas.unset,
        extra_info: typing.Union[MetaOapg.properties.extra_info, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SeelService':
        return super().__new__(
            cls,
            *args,
            contract_id=contract_id,
            quote_id=quote_id,
            created_ts=created_ts,
            type=type,
            price=price,
            status=status,
            covered_items=covered_items,
            extra_info=extra_info,
            _configuration=_configuration,
            **kwargs,
        )

from seel_python_sdk.model.seel_service_covered_items import SeelServiceCoveredItems
