# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401


class Item(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "allocated_discounts",
            "line_item_id",
            "quantity",
            "requires_shipping",
            "product_title",
            "condition",
            "is_final_sale",
            "sales_tax",
            "final_price",
            "category_2",
            "price",
            "category_1",
            "product_id",
            "currency",
        }
        
        class properties:
            line_item_id = schemas.StrSchema
            product_id = schemas.StrSchema
            product_title = schemas.StrSchema
            quantity = schemas.IntSchema
            price = schemas.Float64Schema
            allocated_discounts = schemas.Float64Schema
            sales_tax = schemas.Float64Schema
            final_price = schemas.Float64Schema
            currency = schemas.StrSchema
            requires_shipping = schemas.BoolSchema
            category_1 = schemas.StrSchema
            category_2 = schemas.StrSchema
            is_final_sale = schemas.BoolSchema
            
            
            class condition(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "new": "NEW",
                        "used": "USED",
                        "refurbished": "REFURBISHED",
                    }
                
                @schemas.classproperty
                def NEW(cls):
                    return cls("new")
                
                @schemas.classproperty
                def USED(cls):
                    return cls("used")
                
                @schemas.classproperty
                def REFURBISHED(cls):
                    return cls("refurbished")
            product_description = schemas.StrSchema
            variant_id = schemas.StrSchema
            variant_title = schemas.StrSchema
            sku = schemas.StrSchema
            seller_id = schemas.StrSchema
            seller_name = schemas.StrSchema
            brand_name = schemas.StrSchema
            retail_price = schemas.Float64Schema
            product_url = schemas.StrSchema
            image_url = schemas.StrSchema
            category_3 = schemas.StrSchema
            category_4 = schemas.StrSchema
        
            @staticmethod
            def product_attributes() -> typing.Type['ProductAttributes']:
                return ProductAttributes
        
            @staticmethod
            def shipping_origin() -> typing.Type['ItemShippingOrigin']:
                return ItemShippingOrigin
            extra_info = schemas.DictSchema
            __annotations__ = {
                "line_item_id": line_item_id,
                "product_id": product_id,
                "product_title": product_title,
                "quantity": quantity,
                "price": price,
                "allocated_discounts": allocated_discounts,
                "sales_tax": sales_tax,
                "final_price": final_price,
                "currency": currency,
                "requires_shipping": requires_shipping,
                "category_1": category_1,
                "category_2": category_2,
                "is_final_sale": is_final_sale,
                "condition": condition,
                "product_description": product_description,
                "variant_id": variant_id,
                "variant_title": variant_title,
                "sku": sku,
                "seller_id": seller_id,
                "seller_name": seller_name,
                "brand_name": brand_name,
                "retail_price": retail_price,
                "product_url": product_url,
                "image_url": image_url,
                "category_3": category_3,
                "category_4": category_4,
                "product_attributes": product_attributes,
                "shipping_origin": shipping_origin,
                "extra_info": extra_info,
            }
    
    allocated_discounts: MetaOapg.properties.allocated_discounts
    line_item_id: MetaOapg.properties.line_item_id
    quantity: MetaOapg.properties.quantity
    requires_shipping: MetaOapg.properties.requires_shipping
    product_title: MetaOapg.properties.product_title
    condition: MetaOapg.properties.condition
    is_final_sale: MetaOapg.properties.is_final_sale
    sales_tax: MetaOapg.properties.sales_tax
    final_price: MetaOapg.properties.final_price
    category_2: MetaOapg.properties.category_2
    price: MetaOapg.properties.price
    category_1: MetaOapg.properties.category_1
    product_id: MetaOapg.properties.product_id
    currency: MetaOapg.properties.currency
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["line_item_id"]) -> MetaOapg.properties.line_item_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_id"]) -> MetaOapg.properties.product_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_title"]) -> MetaOapg.properties.product_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocated_discounts"]) -> MetaOapg.properties.allocated_discounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sales_tax"]) -> MetaOapg.properties.sales_tax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["final_price"]) -> MetaOapg.properties.final_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requires_shipping"]) -> MetaOapg.properties.requires_shipping: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_1"]) -> MetaOapg.properties.category_1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_2"]) -> MetaOapg.properties.category_2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_final_sale"]) -> MetaOapg.properties.is_final_sale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["condition"]) -> MetaOapg.properties.condition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_description"]) -> MetaOapg.properties.product_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variant_id"]) -> MetaOapg.properties.variant_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variant_title"]) -> MetaOapg.properties.variant_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seller_id"]) -> MetaOapg.properties.seller_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seller_name"]) -> MetaOapg.properties.seller_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand_name"]) -> MetaOapg.properties.brand_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retail_price"]) -> MetaOapg.properties.retail_price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_url"]) -> MetaOapg.properties.product_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_url"]) -> MetaOapg.properties.image_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_3"]) -> MetaOapg.properties.category_3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_4"]) -> MetaOapg.properties.category_4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_attributes"]) -> 'ProductAttributes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipping_origin"]) -> 'ItemShippingOrigin': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extra_info"]) -> MetaOapg.properties.extra_info: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["line_item_id", "product_id", "product_title", "quantity", "price", "allocated_discounts", "sales_tax", "final_price", "currency", "requires_shipping", "category_1", "category_2", "is_final_sale", "condition", "product_description", "variant_id", "variant_title", "sku", "seller_id", "seller_name", "brand_name", "retail_price", "product_url", "image_url", "category_3", "category_4", "product_attributes", "shipping_origin", "extra_info", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["line_item_id"]) -> MetaOapg.properties.line_item_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_id"]) -> MetaOapg.properties.product_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_title"]) -> MetaOapg.properties.product_title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocated_discounts"]) -> MetaOapg.properties.allocated_discounts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sales_tax"]) -> MetaOapg.properties.sales_tax: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["final_price"]) -> MetaOapg.properties.final_price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requires_shipping"]) -> MetaOapg.properties.requires_shipping: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_1"]) -> MetaOapg.properties.category_1: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_2"]) -> MetaOapg.properties.category_2: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_final_sale"]) -> MetaOapg.properties.is_final_sale: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["condition"]) -> MetaOapg.properties.condition: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_description"]) -> typing.Union[MetaOapg.properties.product_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variant_id"]) -> typing.Union[MetaOapg.properties.variant_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variant_title"]) -> typing.Union[MetaOapg.properties.variant_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> typing.Union[MetaOapg.properties.sku, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seller_id"]) -> typing.Union[MetaOapg.properties.seller_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seller_name"]) -> typing.Union[MetaOapg.properties.seller_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand_name"]) -> typing.Union[MetaOapg.properties.brand_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retail_price"]) -> typing.Union[MetaOapg.properties.retail_price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_url"]) -> typing.Union[MetaOapg.properties.product_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_url"]) -> typing.Union[MetaOapg.properties.image_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_3"]) -> typing.Union[MetaOapg.properties.category_3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_4"]) -> typing.Union[MetaOapg.properties.category_4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_attributes"]) -> typing.Union['ProductAttributes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipping_origin"]) -> typing.Union['ItemShippingOrigin', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extra_info"]) -> typing.Union[MetaOapg.properties.extra_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["line_item_id", "product_id", "product_title", "quantity", "price", "allocated_discounts", "sales_tax", "final_price", "currency", "requires_shipping", "category_1", "category_2", "is_final_sale", "condition", "product_description", "variant_id", "variant_title", "sku", "seller_id", "seller_name", "brand_name", "retail_price", "product_url", "image_url", "category_3", "category_4", "product_attributes", "shipping_origin", "extra_info", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        allocated_discounts: typing.Union[MetaOapg.properties.allocated_discounts, decimal.Decimal, int, float, ],
        line_item_id: typing.Union[MetaOapg.properties.line_item_id, str, ],
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, ],
        requires_shipping: typing.Union[MetaOapg.properties.requires_shipping, bool, ],
        product_title: typing.Union[MetaOapg.properties.product_title, str, ],
        condition: typing.Union[MetaOapg.properties.condition, str, ],
        is_final_sale: typing.Union[MetaOapg.properties.is_final_sale, bool, ],
        sales_tax: typing.Union[MetaOapg.properties.sales_tax, decimal.Decimal, int, float, ],
        final_price: typing.Union[MetaOapg.properties.final_price, decimal.Decimal, int, float, ],
        category_2: typing.Union[MetaOapg.properties.category_2, str, ],
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, ],
        category_1: typing.Union[MetaOapg.properties.category_1, str, ],
        product_id: typing.Union[MetaOapg.properties.product_id, str, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        product_description: typing.Union[MetaOapg.properties.product_description, str, schemas.Unset] = schemas.unset,
        variant_id: typing.Union[MetaOapg.properties.variant_id, str, schemas.Unset] = schemas.unset,
        variant_title: typing.Union[MetaOapg.properties.variant_title, str, schemas.Unset] = schemas.unset,
        sku: typing.Union[MetaOapg.properties.sku, str, schemas.Unset] = schemas.unset,
        seller_id: typing.Union[MetaOapg.properties.seller_id, str, schemas.Unset] = schemas.unset,
        seller_name: typing.Union[MetaOapg.properties.seller_name, str, schemas.Unset] = schemas.unset,
        brand_name: typing.Union[MetaOapg.properties.brand_name, str, schemas.Unset] = schemas.unset,
        retail_price: typing.Union[MetaOapg.properties.retail_price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        product_url: typing.Union[MetaOapg.properties.product_url, str, schemas.Unset] = schemas.unset,
        image_url: typing.Union[MetaOapg.properties.image_url, str, schemas.Unset] = schemas.unset,
        category_3: typing.Union[MetaOapg.properties.category_3, str, schemas.Unset] = schemas.unset,
        category_4: typing.Union[MetaOapg.properties.category_4, str, schemas.Unset] = schemas.unset,
        product_attributes: typing.Union['ProductAttributes', schemas.Unset] = schemas.unset,
        shipping_origin: typing.Union['ItemShippingOrigin', schemas.Unset] = schemas.unset,
        extra_info: typing.Union[MetaOapg.properties.extra_info, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Item':
        return super().__new__(
            cls,
            *args,
            allocated_discounts=allocated_discounts,
            line_item_id=line_item_id,
            quantity=quantity,
            requires_shipping=requires_shipping,
            product_title=product_title,
            condition=condition,
            is_final_sale=is_final_sale,
            sales_tax=sales_tax,
            final_price=final_price,
            category_2=category_2,
            price=price,
            category_1=category_1,
            product_id=product_id,
            currency=currency,
            product_description=product_description,
            variant_id=variant_id,
            variant_title=variant_title,
            sku=sku,
            seller_id=seller_id,
            seller_name=seller_name,
            brand_name=brand_name,
            retail_price=retail_price,
            product_url=product_url,
            image_url=image_url,
            category_3=category_3,
            category_4=category_4,
            product_attributes=product_attributes,
            shipping_origin=shipping_origin,
            extra_info=extra_info,
            _configuration=_configuration,
            **kwargs,
        )

from seel_python_sdk.model.item_shipping_origin import ItemShippingOrigin
from seel_python_sdk.model.product_attributes import ProductAttributes
