# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401


class Product(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "price",
            "product_id",
            "brand_name",
            "currency",
            "product_title",
        }
        
        class properties:
            product_id = schemas.StrSchema
            product_title = schemas.StrSchema
            brand_name = schemas.StrSchema
            price = schemas.Float64Schema
            currency = schemas.StrSchema
            merchant_id = schemas.StrSchema
            variant_id = schemas.StrSchema
            variant_title = schemas.StrSchema
            manufacturer = schemas.StrSchema
            category_1 = schemas.StrSchema
            category_2 = schemas.StrSchema
            category_3 = schemas.StrSchema
            category_4 = schemas.StrSchema
            product_description = schemas.StrSchema
            image_url = schemas.StrSchema
            requires_shipping = schemas.BoolSchema
            model_number = schemas.StrSchema
            condition = schemas.StrSchema
            sku = schemas.StrSchema
        
            @staticmethod
            def identifiers() -> typing.Type['ProductIdentifiers']:
                return ProductIdentifiers
        
            @staticmethod
            def manufacturer_warranty() -> typing.Type['ProductManufacturerWarranty']:
                return ProductManufacturerWarranty
        
            @staticmethod
            def dimensions() -> typing.Type['ProductDimensions']:
                return ProductDimensions
        
            @staticmethod
            def weight() -> typing.Type['ProductWeight']:
                return ProductWeight
        
            @staticmethod
            def product_attributes() -> typing.Type['ProductProductAttributes']:
                return ProductProductAttributes
            created_ts = schemas.DateTimeSchema
            updated_ts = schemas.DateTimeSchema
        
            @staticmethod
            def enabled_services() -> typing.Type['ProductEnabledServices']:
                return ProductEnabledServices
            __annotations__ = {
                "product_id": product_id,
                "product_title": product_title,
                "brand_name": brand_name,
                "price": price,
                "currency": currency,
                "merchant_id": merchant_id,
                "variant_id": variant_id,
                "variant_title": variant_title,
                "manufacturer": manufacturer,
                "category_1": category_1,
                "category_2": category_2,
                "category_3": category_3,
                "category_4": category_4,
                "product_description": product_description,
                "image_url": image_url,
                "requires_shipping": requires_shipping,
                "model_number": model_number,
                "condition": condition,
                "sku": sku,
                "identifiers": identifiers,
                "manufacturer_warranty": manufacturer_warranty,
                "dimensions": dimensions,
                "weight": weight,
                "product_attributes": product_attributes,
                "created_ts": created_ts,
                "updated_ts": updated_ts,
                "enabled_services": enabled_services,
            }
    
    price: MetaOapg.properties.price
    product_id: MetaOapg.properties.product_id
    brand_name: MetaOapg.properties.brand_name
    currency: MetaOapg.properties.currency
    product_title: MetaOapg.properties.product_title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_id"]) -> MetaOapg.properties.product_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_title"]) -> MetaOapg.properties.product_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand_name"]) -> MetaOapg.properties.brand_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_id"]) -> MetaOapg.properties.merchant_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variant_id"]) -> MetaOapg.properties.variant_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variant_title"]) -> MetaOapg.properties.variant_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manufacturer"]) -> MetaOapg.properties.manufacturer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_1"]) -> MetaOapg.properties.category_1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_2"]) -> MetaOapg.properties.category_2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_3"]) -> MetaOapg.properties.category_3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_4"]) -> MetaOapg.properties.category_4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_description"]) -> MetaOapg.properties.product_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_url"]) -> MetaOapg.properties.image_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requires_shipping"]) -> MetaOapg.properties.requires_shipping: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_number"]) -> MetaOapg.properties.model_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["condition"]) -> MetaOapg.properties.condition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifiers"]) -> 'ProductIdentifiers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manufacturer_warranty"]) -> 'ProductManufacturerWarranty': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dimensions"]) -> 'ProductDimensions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weight"]) -> 'ProductWeight': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_attributes"]) -> 'ProductProductAttributes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_ts"]) -> MetaOapg.properties.created_ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_ts"]) -> MetaOapg.properties.updated_ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled_services"]) -> 'ProductEnabledServices': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["product_id", "product_title", "brand_name", "price", "currency", "merchant_id", "variant_id", "variant_title", "manufacturer", "category_1", "category_2", "category_3", "category_4", "product_description", "image_url", "requires_shipping", "model_number", "condition", "sku", "identifiers", "manufacturer_warranty", "dimensions", "weight", "product_attributes", "created_ts", "updated_ts", "enabled_services", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_id"]) -> MetaOapg.properties.product_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_title"]) -> MetaOapg.properties.product_title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand_name"]) -> MetaOapg.properties.brand_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_id"]) -> typing.Union[MetaOapg.properties.merchant_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variant_id"]) -> typing.Union[MetaOapg.properties.variant_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variant_title"]) -> typing.Union[MetaOapg.properties.variant_title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manufacturer"]) -> typing.Union[MetaOapg.properties.manufacturer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_1"]) -> typing.Union[MetaOapg.properties.category_1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_2"]) -> typing.Union[MetaOapg.properties.category_2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_3"]) -> typing.Union[MetaOapg.properties.category_3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_4"]) -> typing.Union[MetaOapg.properties.category_4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_description"]) -> typing.Union[MetaOapg.properties.product_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_url"]) -> typing.Union[MetaOapg.properties.image_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requires_shipping"]) -> typing.Union[MetaOapg.properties.requires_shipping, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_number"]) -> typing.Union[MetaOapg.properties.model_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["condition"]) -> typing.Union[MetaOapg.properties.condition, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> typing.Union[MetaOapg.properties.sku, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifiers"]) -> typing.Union['ProductIdentifiers', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manufacturer_warranty"]) -> typing.Union['ProductManufacturerWarranty', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dimensions"]) -> typing.Union['ProductDimensions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weight"]) -> typing.Union['ProductWeight', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_attributes"]) -> typing.Union['ProductProductAttributes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_ts"]) -> typing.Union[MetaOapg.properties.created_ts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_ts"]) -> typing.Union[MetaOapg.properties.updated_ts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled_services"]) -> typing.Union['ProductEnabledServices', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["product_id", "product_title", "brand_name", "price", "currency", "merchant_id", "variant_id", "variant_title", "manufacturer", "category_1", "category_2", "category_3", "category_4", "product_description", "image_url", "requires_shipping", "model_number", "condition", "sku", "identifiers", "manufacturer_warranty", "dimensions", "weight", "product_attributes", "created_ts", "updated_ts", "enabled_services", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, ],
        product_id: typing.Union[MetaOapg.properties.product_id, str, ],
        brand_name: typing.Union[MetaOapg.properties.brand_name, str, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        product_title: typing.Union[MetaOapg.properties.product_title, str, ],
        merchant_id: typing.Union[MetaOapg.properties.merchant_id, str, schemas.Unset] = schemas.unset,
        variant_id: typing.Union[MetaOapg.properties.variant_id, str, schemas.Unset] = schemas.unset,
        variant_title: typing.Union[MetaOapg.properties.variant_title, str, schemas.Unset] = schemas.unset,
        manufacturer: typing.Union[MetaOapg.properties.manufacturer, str, schemas.Unset] = schemas.unset,
        category_1: typing.Union[MetaOapg.properties.category_1, str, schemas.Unset] = schemas.unset,
        category_2: typing.Union[MetaOapg.properties.category_2, str, schemas.Unset] = schemas.unset,
        category_3: typing.Union[MetaOapg.properties.category_3, str, schemas.Unset] = schemas.unset,
        category_4: typing.Union[MetaOapg.properties.category_4, str, schemas.Unset] = schemas.unset,
        product_description: typing.Union[MetaOapg.properties.product_description, str, schemas.Unset] = schemas.unset,
        image_url: typing.Union[MetaOapg.properties.image_url, str, schemas.Unset] = schemas.unset,
        requires_shipping: typing.Union[MetaOapg.properties.requires_shipping, bool, schemas.Unset] = schemas.unset,
        model_number: typing.Union[MetaOapg.properties.model_number, str, schemas.Unset] = schemas.unset,
        condition: typing.Union[MetaOapg.properties.condition, str, schemas.Unset] = schemas.unset,
        sku: typing.Union[MetaOapg.properties.sku, str, schemas.Unset] = schemas.unset,
        identifiers: typing.Union['ProductIdentifiers', schemas.Unset] = schemas.unset,
        manufacturer_warranty: typing.Union['ProductManufacturerWarranty', schemas.Unset] = schemas.unset,
        dimensions: typing.Union['ProductDimensions', schemas.Unset] = schemas.unset,
        weight: typing.Union['ProductWeight', schemas.Unset] = schemas.unset,
        product_attributes: typing.Union['ProductProductAttributes', schemas.Unset] = schemas.unset,
        created_ts: typing.Union[MetaOapg.properties.created_ts, str, datetime, schemas.Unset] = schemas.unset,
        updated_ts: typing.Union[MetaOapg.properties.updated_ts, str, datetime, schemas.Unset] = schemas.unset,
        enabled_services: typing.Union['ProductEnabledServices', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Product':
        return super().__new__(
            cls,
            *args,
            price=price,
            product_id=product_id,
            brand_name=brand_name,
            currency=currency,
            product_title=product_title,
            merchant_id=merchant_id,
            variant_id=variant_id,
            variant_title=variant_title,
            manufacturer=manufacturer,
            category_1=category_1,
            category_2=category_2,
            category_3=category_3,
            category_4=category_4,
            product_description=product_description,
            image_url=image_url,
            requires_shipping=requires_shipping,
            model_number=model_number,
            condition=condition,
            sku=sku,
            identifiers=identifiers,
            manufacturer_warranty=manufacturer_warranty,
            dimensions=dimensions,
            weight=weight,
            product_attributes=product_attributes,
            created_ts=created_ts,
            updated_ts=updated_ts,
            enabled_services=enabled_services,
            _configuration=_configuration,
            **kwargs,
        )

from seel_python_sdk.model.product_dimensions import ProductDimensions
from seel_python_sdk.model.product_enabled_services import ProductEnabledServices
from seel_python_sdk.model.product_identifiers import ProductIdentifiers
from seel_python_sdk.model.product_manufacturer_warranty import ProductManufacturerWarranty
from seel_python_sdk.model.product_product_attributes import ProductProductAttributes
from seel_python_sdk.model.product_weight import ProductWeight
