# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401


class ProductPlan(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "coverage_starts",
            "coverage_includes",
            "service_type",
            "price",
            "deductible",
            "name",
            "currency",
            "id",
            "term_length",
            "replacement_type",
        }
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            price = schemas.Float64Schema
            currency = schemas.StrSchema
            term_length = schemas.IntSchema
            coverage_starts = schemas.StrSchema
            coverage_includes = schemas.StrSchema
            service_type = schemas.StrSchema
            replacement_type = schemas.StrSchema
            deductible = schemas.Float64Schema
            description = schemas.StrSchema
            image_url = schemas.StrSchema
            url = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "price": price,
                "currency": currency,
                "term_length": term_length,
                "coverage_starts": coverage_starts,
                "coverage_includes": coverage_includes,
                "service_type": service_type,
                "replacement_type": replacement_type,
                "deductible": deductible,
                "description": description,
                "image_url": image_url,
                "url": url,
            }
    
    coverage_starts: MetaOapg.properties.coverage_starts
    coverage_includes: MetaOapg.properties.coverage_includes
    service_type: MetaOapg.properties.service_type
    price: MetaOapg.properties.price
    deductible: MetaOapg.properties.deductible
    name: MetaOapg.properties.name
    currency: MetaOapg.properties.currency
    id: MetaOapg.properties.id
    term_length: MetaOapg.properties.term_length
    replacement_type: MetaOapg.properties.replacement_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["term_length"]) -> MetaOapg.properties.term_length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coverage_starts"]) -> MetaOapg.properties.coverage_starts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coverage_includes"]) -> MetaOapg.properties.coverage_includes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_type"]) -> MetaOapg.properties.service_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replacement_type"]) -> MetaOapg.properties.replacement_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deductible"]) -> MetaOapg.properties.deductible: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_url"]) -> MetaOapg.properties.image_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "price", "currency", "term_length", "coverage_starts", "coverage_includes", "service_type", "replacement_type", "deductible", "description", "image_url", "url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["term_length"]) -> MetaOapg.properties.term_length: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coverage_starts"]) -> MetaOapg.properties.coverage_starts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coverage_includes"]) -> MetaOapg.properties.coverage_includes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_type"]) -> MetaOapg.properties.service_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replacement_type"]) -> MetaOapg.properties.replacement_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deductible"]) -> MetaOapg.properties.deductible: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_url"]) -> typing.Union[MetaOapg.properties.image_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "price", "currency", "term_length", "coverage_starts", "coverage_includes", "service_type", "replacement_type", "deductible", "description", "image_url", "url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        coverage_starts: typing.Union[MetaOapg.properties.coverage_starts, str, ],
        coverage_includes: typing.Union[MetaOapg.properties.coverage_includes, str, ],
        service_type: typing.Union[MetaOapg.properties.service_type, str, ],
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, ],
        deductible: typing.Union[MetaOapg.properties.deductible, decimal.Decimal, int, float, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        currency: typing.Union[MetaOapg.properties.currency, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        term_length: typing.Union[MetaOapg.properties.term_length, decimal.Decimal, int, ],
        replacement_type: typing.Union[MetaOapg.properties.replacement_type, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        image_url: typing.Union[MetaOapg.properties.image_url, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProductPlan':
        return super().__new__(
            cls,
            *args,
            coverage_starts=coverage_starts,
            coverage_includes=coverage_includes,
            service_type=service_type,
            price=price,
            deductible=deductible,
            name=name,
            currency=currency,
            id=id,
            term_length=term_length,
            replacement_type=replacement_type,
            description=description,
            image_url=image_url,
            url=url,
            _configuration=_configuration,
            **kwargs,
        )
