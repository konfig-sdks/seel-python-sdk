# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401


class Contract(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            contract_id = schemas.StrSchema
            order_id = schemas.StrSchema
            quote_id = schemas.StrSchema
        
            @staticmethod
            def customer() -> typing.Type['Customer']:
                return Customer
            premium = schemas.Float64Schema
            premium_tax = schemas.Float64Schema
            currency = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "active": "ACTIVE",
                        "cancelled": "CANCELLED",
                        "pending": "PENDING",
                    }
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("active")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("cancelled")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("pending")
            
            
            class cancelled_ts(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cancelled_ts':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class created_ts(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'created_ts':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class updated_ts(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'updated_ts':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def covered_items() -> typing.Type['ContractCoveredItems']:
                return ContractCoveredItems
            __annotations__ = {
                "contract_id": contract_id,
                "order_id": order_id,
                "quote_id": quote_id,
                "customer": customer,
                "premium": premium,
                "premium_tax": premium_tax,
                "currency": currency,
                "status": status,
                "cancelled_ts": cancelled_ts,
                "created_ts": created_ts,
                "updated_ts": updated_ts,
                "covered_items": covered_items,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract_id"]) -> MetaOapg.properties.contract_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order_id"]) -> MetaOapg.properties.order_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quote_id"]) -> MetaOapg.properties.quote_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer"]) -> 'Customer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["premium"]) -> MetaOapg.properties.premium: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["premium_tax"]) -> MetaOapg.properties.premium_tax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cancelled_ts"]) -> MetaOapg.properties.cancelled_ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_ts"]) -> MetaOapg.properties.created_ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_ts"]) -> MetaOapg.properties.updated_ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["covered_items"]) -> 'ContractCoveredItems': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contract_id", "order_id", "quote_id", "customer", "premium", "premium_tax", "currency", "status", "cancelled_ts", "created_ts", "updated_ts", "covered_items", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract_id"]) -> typing.Union[MetaOapg.properties.contract_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order_id"]) -> typing.Union[MetaOapg.properties.order_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quote_id"]) -> typing.Union[MetaOapg.properties.quote_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer"]) -> typing.Union['Customer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["premium"]) -> typing.Union[MetaOapg.properties.premium, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["premium_tax"]) -> typing.Union[MetaOapg.properties.premium_tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cancelled_ts"]) -> typing.Union[MetaOapg.properties.cancelled_ts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_ts"]) -> typing.Union[MetaOapg.properties.created_ts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_ts"]) -> typing.Union[MetaOapg.properties.updated_ts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["covered_items"]) -> typing.Union['ContractCoveredItems', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contract_id", "order_id", "quote_id", "customer", "premium", "premium_tax", "currency", "status", "cancelled_ts", "created_ts", "updated_ts", "covered_items", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        contract_id: typing.Union[MetaOapg.properties.contract_id, str, schemas.Unset] = schemas.unset,
        order_id: typing.Union[MetaOapg.properties.order_id, str, schemas.Unset] = schemas.unset,
        quote_id: typing.Union[MetaOapg.properties.quote_id, str, schemas.Unset] = schemas.unset,
        customer: typing.Union['Customer', schemas.Unset] = schemas.unset,
        premium: typing.Union[MetaOapg.properties.premium, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        premium_tax: typing.Union[MetaOapg.properties.premium_tax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        cancelled_ts: typing.Union[MetaOapg.properties.cancelled_ts, None, str, datetime, schemas.Unset] = schemas.unset,
        created_ts: typing.Union[MetaOapg.properties.created_ts, None, str, datetime, schemas.Unset] = schemas.unset,
        updated_ts: typing.Union[MetaOapg.properties.updated_ts, None, str, datetime, schemas.Unset] = schemas.unset,
        covered_items: typing.Union['ContractCoveredItems', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Contract':
        return super().__new__(
            cls,
            *args,
            contract_id=contract_id,
            order_id=order_id,
            quote_id=quote_id,
            customer=customer,
            premium=premium,
            premium_tax=premium_tax,
            currency=currency,
            status=status,
            cancelled_ts=cancelled_ts,
            created_ts=created_ts,
            updated_ts=updated_ts,
            covered_items=covered_items,
            _configuration=_configuration,
            **kwargs,
        )

from seel_python_sdk.model.contract_covered_items import ContractCoveredItems
from seel_python_sdk.model.customer import Customer
