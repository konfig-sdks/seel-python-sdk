# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401


class Address(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "zipcode",
            "country",
            "city",
            "address_1",
            "state",
        }
        
        class properties:
            address_1 = schemas.StrSchema
            city = schemas.StrSchema
            state = schemas.StrSchema
            zipcode = schemas.StrSchema
            country = schemas.StrSchema
            address_2 = schemas.StrSchema
            __annotations__ = {
                "address_1": address_1,
                "city": city,
                "state": state,
                "zipcode": zipcode,
                "country": country,
                "address_2": address_2,
            }
    
    zipcode: MetaOapg.properties.zipcode
    country: MetaOapg.properties.country
    city: MetaOapg.properties.city
    address_1: MetaOapg.properties.address_1
    state: MetaOapg.properties.state
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_1"]) -> MetaOapg.properties.address_1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zipcode"]) -> MetaOapg.properties.zipcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_2"]) -> MetaOapg.properties.address_2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["address_1", "city", "state", "zipcode", "country", "address_2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_1"]) -> MetaOapg.properties.address_1: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zipcode"]) -> MetaOapg.properties.zipcode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_2"]) -> typing.Union[MetaOapg.properties.address_2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address_1", "city", "state", "zipcode", "country", "address_2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        zipcode: typing.Union[MetaOapg.properties.zipcode, str, ],
        country: typing.Union[MetaOapg.properties.country, str, ],
        city: typing.Union[MetaOapg.properties.city, str, ],
        address_1: typing.Union[MetaOapg.properties.address_1, str, ],
        state: typing.Union[MetaOapg.properties.state, str, ],
        address_2: typing.Union[MetaOapg.properties.address_2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Address':
        return super().__new__(
            cls,
            *args,
            zipcode=zipcode,
            country=country,
            city=city,
            address_1=address_1,
            state=state,
            address_2=address_2,
            _configuration=_configuration,
            **kwargs,
        )
