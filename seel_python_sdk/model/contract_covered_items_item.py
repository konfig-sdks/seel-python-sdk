# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401


class ContractCoveredItemsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            line_item_id = schemas.StrSchema
            quantity = schemas.IntSchema
            product_id = schemas.StrSchema
            variant_id = schemas.StrSchema
            tracking_number = schemas.StrSchema
            carrier = schemas.StrSchema
            covered_value = schemas.Float64Schema
            __annotations__ = {
                "line_item_id": line_item_id,
                "quantity": quantity,
                "product_id": product_id,
                "variant_id": variant_id,
                "tracking_number": tracking_number,
                "carrier": carrier,
                "covered_value": covered_value,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["line_item_id"]) -> MetaOapg.properties.line_item_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_id"]) -> MetaOapg.properties.product_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variant_id"]) -> MetaOapg.properties.variant_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracking_number"]) -> MetaOapg.properties.tracking_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier"]) -> MetaOapg.properties.carrier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["covered_value"]) -> MetaOapg.properties.covered_value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["line_item_id", "quantity", "product_id", "variant_id", "tracking_number", "carrier", "covered_value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["line_item_id"]) -> typing.Union[MetaOapg.properties.line_item_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_id"]) -> typing.Union[MetaOapg.properties.product_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variant_id"]) -> typing.Union[MetaOapg.properties.variant_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracking_number"]) -> typing.Union[MetaOapg.properties.tracking_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier"]) -> typing.Union[MetaOapg.properties.carrier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["covered_value"]) -> typing.Union[MetaOapg.properties.covered_value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["line_item_id", "quantity", "product_id", "variant_id", "tracking_number", "carrier", "covered_value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        line_item_id: typing.Union[MetaOapg.properties.line_item_id, str, schemas.Unset] = schemas.unset,
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        product_id: typing.Union[MetaOapg.properties.product_id, str, schemas.Unset] = schemas.unset,
        variant_id: typing.Union[MetaOapg.properties.variant_id, str, schemas.Unset] = schemas.unset,
        tracking_number: typing.Union[MetaOapg.properties.tracking_number, str, schemas.Unset] = schemas.unset,
        carrier: typing.Union[MetaOapg.properties.carrier, str, schemas.Unset] = schemas.unset,
        covered_value: typing.Union[MetaOapg.properties.covered_value, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContractCoveredItemsItem':
        return super().__new__(
            cls,
            *args,
            line_item_id=line_item_id,
            quantity=quantity,
            product_id=product_id,
            variant_id=variant_id,
            tracking_number=tracking_number,
            carrier=carrier,
            covered_value=covered_value,
            _configuration=_configuration,
            **kwargs,
        )
