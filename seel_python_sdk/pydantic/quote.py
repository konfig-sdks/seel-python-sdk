# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from seel_python_sdk.pydantic.address import Address
from seel_python_sdk.pydantic.customer import Customer
from seel_python_sdk.pydantic.item import Item

class Quote(BaseModel):
    # The ID of the quote.
    quote_id: typing.Optional[str] = Field(None, alias='quote_id')

    # The ID of a cart.
    cart_id: typing.Optional[str] = Field(None, alias='cart_id')

    # The unique identifier for the merchant within Seel's system.
    merchant_id: typing.Optional[str] = Field(None, alias='merchant_id')

    # The ID of the session.
    session_id: typing.Optional[str] = Field(None, alias='session_id')

    # The ID of the client device.
    device_id: typing.Optional[str] = Field(None, alias='device_id')

    # The IP address of the client.
    client_ip: typing.Optional[str] = Field(None, alias='client_ip')

    # The type of the quote.
    type: typing.Optional[str] = Field(None, alias='type')

    # The price of the quote.
    price: typing.Optional[typing.Union[int, float]] = Field(None, alias='price')

    # The three-letter currency code (ISO 4217 format), i.e. USD etc.
    currency: typing.Optional[str] = Field(None, alias='currency')

    # The status of the quote.
    status: typing.Optional[Literal["accepted", "rejected"]] = Field(None, alias='status')

    # Quote created timestamp in milliseconds
    created_ts: typing.Optional[datetime] = Field(None, alias='created_ts')

    # The list of items included in the quote.
    line_items: typing.Optional[typing.List[Item]] = Field(None, alias='line_items')

    shipping_address: typing.Optional[Address] = Field(None, alias='shipping_address')

    customer: typing.Optional[Customer] = Field(None, alias='customer')

    # Additional information for the order
    extra_info: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='extra_info')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
