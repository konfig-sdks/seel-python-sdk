# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from seel_python_sdk.pydantic.item_shipping_origin import ItemShippingOrigin
from seel_python_sdk.pydantic.product_attributes import ProductAttributes

class Item(BaseModel):
    # The ID of the item.
    line_item_id: str = Field(alias='line_item_id')

    # The ID of the product.
    product_id: str = Field(alias='product_id')

    # The title of the product.
    product_title: str = Field(alias='product_title')

    # The quantity of the product.
    quantity: int = Field(alias='quantity')

    # The price of the product.
    price: typing.Union[int, float] = Field(alias='price')

    # The allocated discounts of the product.
    allocated_discounts: typing.Union[int, float] = Field(alias='allocated_discounts')

    # The sales tax of the product.
    sales_tax: typing.Union[int, float] = Field(alias='sales_tax')

    # The final price of the product.
    final_price: typing.Union[int, float] = Field(alias='final_price')

    # The currency of the price.
    currency: str = Field(alias='currency')

    # Whether the item requires shipping or not.
    requires_shipping: bool = Field(alias='requires_shipping')

    # The main category of the product.
    category_1: str = Field(alias='category_1')

    # The sub category of the product.
    category_2: str = Field(alias='category_2')

    # Whether the item is final sale or not.
    is_final_sale: bool = Field(alias='is_final_sale')

    # The physical condition of the item (e.g. new, used, refurbished)
    condition: Literal["new", "used", "refurbished"] = Field(alias='condition')

    # The description of the product.
    product_description: typing.Optional[str] = Field(None, alias='product_description')

    # The ID of the product variant.
    variant_id: typing.Optional[str] = Field(None, alias='variant_id')

    # The title of the product variant.
    variant_title: typing.Optional[str] = Field(None, alias='variant_title')

    # The sku of the product variant.
    sku: typing.Optional[str] = Field(None, alias='sku')

    # The ID of the seller.
    seller_id: typing.Optional[str] = Field(None, alias='seller_id')

    # The name of the seller.
    seller_name: typing.Optional[str] = Field(None, alias='seller_name')

    # The brand name of the product.
    brand_name: typing.Optional[str] = Field(None, alias='brand_name')

    # The retail price of the product.
    retail_price: typing.Optional[typing.Union[int, float]] = Field(None, alias='retail_price')

    # The URL of the product.
    product_url: typing.Optional[str] = Field(None, alias='product_url')

    # The URL of the product image.
    image_url: typing.Optional[str] = Field(None, alias='image_url')

    # The sub category of the product.
    category_3: typing.Optional[str] = Field(None, alias='category_3')

    # The sub category of the product.
    category_4: typing.Optional[str] = Field(None, alias='category_4')

    product_attributes: typing.Optional[ProductAttributes] = Field(None, alias='product_attributes')

    shipping_origin: typing.Optional[ItemShippingOrigin] = Field(None, alias='shipping_origin')

    # Extra information about the product.
    extra_info: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(None, alias='extra_info')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
