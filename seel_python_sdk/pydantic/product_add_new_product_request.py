# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from seel_python_sdk.pydantic.product_add_new_product_request_dimensions import ProductAddNewProductRequestDimensions
from seel_python_sdk.pydantic.product_add_new_product_request_identifiers import ProductAddNewProductRequestIdentifiers
from seel_python_sdk.pydantic.product_add_new_product_request_manufacturer_warranty import ProductAddNewProductRequestManufacturerWarranty
from seel_python_sdk.pydantic.product_add_new_product_request_product_attributes import ProductAddNewProductRequestProductAttributes
from seel_python_sdk.pydantic.product_add_new_product_request_weight import ProductAddNewProductRequestWeight

class ProductAddNewProductRequest(BaseModel):
    # Product id.
    product_id: str = Field(alias='product_id')

    # Name of the product.
    product_title: str = Field(alias='product_title')

    # The Product Brand or Vendor.
    brand_name: str = Field(alias='brand_name')

    # List price of the product.
    price: typing.Union[int, float] = Field(alias='price')

    # Currency of the price (e.g. USD, EUR).
    currency: str = Field(alias='currency')

    # The unique identifier for the merchant within Seel's system.
    merchant_id: typing.Optional[str] = Field(None, alias='merchant_id')

    # Variant id, the unique identifier of a product SKU. Use 'product_id' if the product doesn't have any variants.
    variant_id: typing.Optional[str] = Field(None, alias='variant_id')

    # Title of the variant.
    variant_title: typing.Optional[str] = Field(None, alias='variant_title')

    # Manufacturer of the item.
    manufacturer: typing.Optional[str] = Field(None, alias='manufacturer')

    # Main product category.
    category_1: typing.Optional[str] = Field(None, alias='category_1')

    # Secondary product category.
    category_2: typing.Optional[str] = Field(None, alias='category_2')

    # Tertiary product category.
    category_3: typing.Optional[str] = Field(None, alias='category_3')

    # Fourth level product category.
    category_4: typing.Optional[str] = Field(None, alias='category_4')

    # Text description of the product.
    product_description: typing.Optional[str] = Field(None, alias='product_description')

    # URL of the product image.
    image_url: typing.Optional[str] = Field(None, alias='image_url')

    # Whether the product requires shipping.
    requires_shipping: typing.Optional[bool] = Field(None, alias='requires_shipping')

    # Manufacturer model number.
    model_number_: typing.Optional[str] = Field(None, alias='model_number')

    # Condition - new, used, refurbished.
    condition: typing.Optional[str] = Field(None, alias='condition')

    # Stock keeping unit.
    sku: typing.Optional[str] = Field(None, alias='sku')

    identifiers: typing.Optional[ProductAddNewProductRequestIdentifiers] = Field(None, alias='identifiers')

    manufacturer_warranty: typing.Optional[ProductAddNewProductRequestManufacturerWarranty] = Field(None, alias='manufacturer_warranty')

    dimensions: typing.Optional[ProductAddNewProductRequestDimensions] = Field(None, alias='dimensions')

    weight: typing.Optional[ProductAddNewProductRequestWeight] = Field(None, alias='weight')

    product_attributes: typing.Optional[ProductAddNewProductRequestProductAttributes] = Field(None, alias='product_attributes')

    # Timestamp when the product was created.
    created_ts: typing.Optional[datetime] = Field(None, alias='created_ts')

    # Timestamp when the product was updated.
    updated_ts: typing.Optional[datetime] = Field(None, alias='updated_ts')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
