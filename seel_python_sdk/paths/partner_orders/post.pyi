# coding: utf-8

"""
    Seel API

    Seel API

    The version of the OpenAPI document: 1.3.0
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from seel_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from seel_python_sdk.api_response import AsyncGeneratorResponse
from seel_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from seel_python_sdk import schemas  # noqa: F401

from seel_python_sdk.model.item import Item as ItemSchema
from seel_python_sdk.model.address import Address as AddressSchema
from seel_python_sdk.model.order_create_new_order_request import OrderCreateNewOrderRequest as OrderCreateNewOrderRequestSchema
from seel_python_sdk.model.order import Order as OrderSchema
from seel_python_sdk.model.customer import Customer as CustomerSchema
from seel_python_sdk.model.order_create_new_order_request_seel_services import OrderCreateNewOrderRequestSeelServices as OrderCreateNewOrderRequestSeelServicesSchema

from seel_python_sdk.type.customer import Customer
from seel_python_sdk.type.item import Item
from seel_python_sdk.type.order_create_new_order_request_seel_services import OrderCreateNewOrderRequestSeelServices
from seel_python_sdk.type.order_create_new_order_request import OrderCreateNewOrderRequest
from seel_python_sdk.type.order import Order
from seel_python_sdk.type.address import Address

from ...api_client import Dictionary
from seel_python_sdk.pydantic.address import Address as AddressPydantic
from seel_python_sdk.pydantic.customer import Customer as CustomerPydantic
from seel_python_sdk.pydantic.order_create_new_order_request_seel_services import OrderCreateNewOrderRequestSeelServices as OrderCreateNewOrderRequestSeelServicesPydantic
from seel_python_sdk.pydantic.item import Item as ItemPydantic
from seel_python_sdk.pydantic.order import Order as OrderPydantic
from seel_python_sdk.pydantic.order_create_new_order_request import OrderCreateNewOrderRequest as OrderCreateNewOrderRequestPydantic

# Header params
XSeelAPIKeySchema = schemas.StrSchema
XSeelAPIVersionSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
        'X-Seel-API-Key': typing.Union[XSeelAPIKeySchema, str, ],
        'X-Seel-API-Version': typing.Union[XSeelAPIVersionSchema, str, ],
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_x_seel_api_key = api_client.HeaderParameter(
    name="X-Seel-API-Key",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XSeelAPIKeySchema,
    required=True,
)
request_header_x_seel_api_version = api_client.HeaderParameter(
    name="X-Seel-API-Version",
    style=api_client.ParameterStyle.SIMPLE,
    schema=XSeelAPIVersionSchema,
    required=True,
)
# Path params
PartnerSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'partner': typing.Union[PartnerSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_partner = api_client.PathParameter(
    name="partner",
    style=api_client.ParameterStyle.SIMPLE,
    schema=PartnerSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = OrderCreateNewOrderRequestSchema


request_body_order_create_new_order_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = OrderSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: Order


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: Order


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _create_new_order_mapped_args(
        self,
        order_id: str,
        order_number: str,
        session_id: str,
        created_ts: str,
        line_items: typing.List[Item],
        shipping_address: Address,
        customer: Customer,
        x_seel_api_key: str,
        x_seel_api_version: str,
        partner: str,
        cart_id: typing.Optional[str] = None,
        merchant_id: typing.Optional[str] = None,
        device_id: typing.Optional[str] = None,
        client_ip: typing.Optional[str] = None,
        seel_services: typing.Optional[OrderCreateNewOrderRequestSeelServices] = None,
        extra_info: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _header_params = {}
        _path_params = {}
        _body = {}
        if order_id is not None:
            _body["order_id"] = order_id
        if order_number is not None:
            _body["order_number"] = order_number
        if session_id is not None:
            _body["session_id"] = session_id
        if cart_id is not None:
            _body["cart_id"] = cart_id
        if merchant_id is not None:
            _body["merchant_id"] = merchant_id
        if device_id is not None:
            _body["device_id"] = device_id
        if client_ip is not None:
            _body["client_ip"] = client_ip
        if created_ts is not None:
            _body["created_ts"] = created_ts
        if line_items is not None:
            _body["line_items"] = line_items
        if shipping_address is not None:
            _body["shipping_address"] = shipping_address
        if customer is not None:
            _body["customer"] = customer
        if seel_services is not None:
            _body["seel_services"] = seel_services
        if extra_info is not None:
            _body["extra_info"] = extra_info
        args.body = _body
        if x_seel_api_key is not None:
            _header_params["X-Seel-API-Key"] = x_seel_api_key
        if x_seel_api_version is not None:
            _header_params["X-Seel-API-Version"] = x_seel_api_version
        if partner is not None:
            _path_params["partner"] = partner
        args.header = _header_params
        args.path = _path_params
        return args

    async def _acreate_new_order_oapg(
        self,
        body: typing.Any = None,
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create an order
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_partner,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_seel_api_key,
            request_header_x_seel_api_version,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/{partner}/orders',
            body=body,
            headers=_headers,
        )
        serialized_data = request_body_order_create_new_order_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_new_order_oapg(
        self,
        body: typing.Any = None,
            header_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create an order
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_partner,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_x_seel_api_key,
            request_header_x_seel_api_version,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/{partner}/orders',
            body=body,
            headers=_headers,
        )
        serialized_data = request_body_order_create_new_order_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateNewOrderRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate_new_order(
        self,
        order_id: str,
        order_number: str,
        session_id: str,
        created_ts: str,
        line_items: typing.List[Item],
        shipping_address: Address,
        customer: Customer,
        x_seel_api_key: str,
        x_seel_api_version: str,
        partner: str,
        cart_id: typing.Optional[str] = None,
        merchant_id: typing.Optional[str] = None,
        device_id: typing.Optional[str] = None,
        client_ip: typing.Optional[str] = None,
        seel_services: typing.Optional[OrderCreateNewOrderRequestSeelServices] = None,
        extra_info: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_new_order_mapped_args(
            order_id=order_id,
            order_number=order_number,
            session_id=session_id,
            created_ts=created_ts,
            line_items=line_items,
            shipping_address=shipping_address,
            customer=customer,
            x_seel_api_key=x_seel_api_key,
            x_seel_api_version=x_seel_api_version,
            partner=partner,
            cart_id=cart_id,
            merchant_id=merchant_id,
            device_id=device_id,
            client_ip=client_ip,
            seel_services=seel_services,
            extra_info=extra_info,
        )
        return await self._acreate_new_order_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def create_new_order(
        self,
        order_id: str,
        order_number: str,
        session_id: str,
        created_ts: str,
        line_items: typing.List[Item],
        shipping_address: Address,
        customer: Customer,
        x_seel_api_key: str,
        x_seel_api_version: str,
        partner: str,
        cart_id: typing.Optional[str] = None,
        merchant_id: typing.Optional[str] = None,
        device_id: typing.Optional[str] = None,
        client_ip: typing.Optional[str] = None,
        seel_services: typing.Optional[OrderCreateNewOrderRequestSeelServices] = None,
        extra_info: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_new_order_mapped_args(
            order_id=order_id,
            order_number=order_number,
            session_id=session_id,
            created_ts=created_ts,
            line_items=line_items,
            shipping_address=shipping_address,
            customer=customer,
            x_seel_api_key=x_seel_api_key,
            x_seel_api_version=x_seel_api_version,
            partner=partner,
            cart_id=cart_id,
            merchant_id=merchant_id,
            device_id=device_id,
            client_ip=client_ip,
            seel_services=seel_services,
            extra_info=extra_info,
        )
        return self._create_new_order_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
        )

class CreateNewOrder(BaseApi):

    async def acreate_new_order(
        self,
        order_id: str,
        order_number: str,
        session_id: str,
        created_ts: str,
        line_items: typing.List[Item],
        shipping_address: Address,
        customer: Customer,
        x_seel_api_key: str,
        x_seel_api_version: str,
        partner: str,
        cart_id: typing.Optional[str] = None,
        merchant_id: typing.Optional[str] = None,
        device_id: typing.Optional[str] = None,
        client_ip: typing.Optional[str] = None,
        seel_services: typing.Optional[OrderCreateNewOrderRequestSeelServices] = None,
        extra_info: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        validate: bool = False,
        **kwargs,
    ) -> OrderPydantic:
        raw_response = await self.raw.acreate_new_order(
            order_id=order_id,
            order_number=order_number,
            session_id=session_id,
            created_ts=created_ts,
            line_items=line_items,
            shipping_address=shipping_address,
            customer=customer,
            x_seel_api_key=x_seel_api_key,
            x_seel_api_version=x_seel_api_version,
            partner=partner,
            cart_id=cart_id,
            merchant_id=merchant_id,
            device_id=device_id,
            client_ip=client_ip,
            seel_services=seel_services,
            extra_info=extra_info,
            **kwargs,
        )
        if validate:
            return OrderPydantic(**raw_response.body)
        return api_client.construct_model_instance(OrderPydantic, raw_response.body)
    
    
    def create_new_order(
        self,
        order_id: str,
        order_number: str,
        session_id: str,
        created_ts: str,
        line_items: typing.List[Item],
        shipping_address: Address,
        customer: Customer,
        x_seel_api_key: str,
        x_seel_api_version: str,
        partner: str,
        cart_id: typing.Optional[str] = None,
        merchant_id: typing.Optional[str] = None,
        device_id: typing.Optional[str] = None,
        client_ip: typing.Optional[str] = None,
        seel_services: typing.Optional[OrderCreateNewOrderRequestSeelServices] = None,
        extra_info: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        validate: bool = False,
    ) -> OrderPydantic:
        raw_response = self.raw.create_new_order(
            order_id=order_id,
            order_number=order_number,
            session_id=session_id,
            created_ts=created_ts,
            line_items=line_items,
            shipping_address=shipping_address,
            customer=customer,
            x_seel_api_key=x_seel_api_key,
            x_seel_api_version=x_seel_api_version,
            partner=partner,
            cart_id=cart_id,
            merchant_id=merchant_id,
            device_id=device_id,
            client_ip=client_ip,
            seel_services=seel_services,
            extra_info=extra_info,
        )
        if validate:
            return OrderPydantic(**raw_response.body)
        return api_client.construct_model_instance(OrderPydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        order_id: str,
        order_number: str,
        session_id: str,
        created_ts: str,
        line_items: typing.List[Item],
        shipping_address: Address,
        customer: Customer,
        x_seel_api_key: str,
        x_seel_api_version: str,
        partner: str,
        cart_id: typing.Optional[str] = None,
        merchant_id: typing.Optional[str] = None,
        device_id: typing.Optional[str] = None,
        client_ip: typing.Optional[str] = None,
        seel_services: typing.Optional[OrderCreateNewOrderRequestSeelServices] = None,
        extra_info: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_new_order_mapped_args(
            order_id=order_id,
            order_number=order_number,
            session_id=session_id,
            created_ts=created_ts,
            line_items=line_items,
            shipping_address=shipping_address,
            customer=customer,
            x_seel_api_key=x_seel_api_key,
            x_seel_api_version=x_seel_api_version,
            partner=partner,
            cart_id=cart_id,
            merchant_id=merchant_id,
            device_id=device_id,
            client_ip=client_ip,
            seel_services=seel_services,
            extra_info=extra_info,
        )
        return await self._acreate_new_order_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        order_id: str,
        order_number: str,
        session_id: str,
        created_ts: str,
        line_items: typing.List[Item],
        shipping_address: Address,
        customer: Customer,
        x_seel_api_key: str,
        x_seel_api_version: str,
        partner: str,
        cart_id: typing.Optional[str] = None,
        merchant_id: typing.Optional[str] = None,
        device_id: typing.Optional[str] = None,
        client_ip: typing.Optional[str] = None,
        seel_services: typing.Optional[OrderCreateNewOrderRequestSeelServices] = None,
        extra_info: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._create_new_order_mapped_args(
            order_id=order_id,
            order_number=order_number,
            session_id=session_id,
            created_ts=created_ts,
            line_items=line_items,
            shipping_address=shipping_address,
            customer=customer,
            x_seel_api_key=x_seel_api_key,
            x_seel_api_version=x_seel_api_version,
            partner=partner,
            cart_id=cart_id,
            merchant_id=merchant_id,
            device_id=device_id,
            client_ip=client_ip,
            seel_services=seel_services,
            extra_info=extra_info,
        )
        return self._create_new_order_oapg(
            body=args.body,
            header_params=args.header,
            path_params=args.path,
        )

